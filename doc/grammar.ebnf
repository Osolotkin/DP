/* https://bnfplayground.pauliankline.com/ */

<Grammar> ::= ( <Statement> | <Definition> | <Scope> | <Namespace> )*



<Statement> ::= ( <StatementAssignment> | <VariableDefinition> )? ";"

<StatementAssignment> ::= <Expression> "=" <RValue>

<RValue> ::= <Allocation> | <Expression>

<Allocation> ::= "alloc" <AllocationDefinition>

<AllocationDefinition> ::= <Datatype>? <Decorator>? ( ":" <Expression> )?

<BuiltinDatatype> ::= "int" | "i8" | "i16" | "i32" | "i64" | "u8" | "u16" | "u32" | "u64" | "f32" | "f64" | "error"

<Datatype> ::= <Identifier> | <BuiltinDatatype>

<VariableDefinition> ::= <VariableDefinitionLValue> ( "=" <RValue> )?

<VariableDefinitionLValue> ::= <FullDatatype> <Decorator>* <Identifier>

<FullDatatype> ::= <Datatype> <Decorator>*

<Decorator> ::= ( "[" ( E | <Number> | <Qualifier> ) "]" ) | ( "^" )

<Namespace> ::= "namespace" <Identifier> <Scope>

<Scope> ::= "{" <Statement>* "}"


<Qualifier> ::= "const" | "embed"



/* ========== DEFINITIONS BEGIN ========== */

<Definition> ::= <UnionDefinition> | <StructDefinition> | <FunctionDefinition> | <ErrorDefinition>

<UnionDefinition> ::= "def" "union" <StructUnionBody>

<StructDefinition> ::= "def" "struct"? <StructUnionBody>

<StructUnionBody> ::= "{" ( <VariableDefinition> ";" )* "}"

<ErrorDefinition> ::= "error" "{" ( <Identifier> ";" )* "}"

<FunctionDefinition> ::= "fcn" "(" ( <VariableDefinitionLValue> ( "," <VariableDefinitionLValue> )* )? ")" ( "->" <Datatype> )? <Scope>

/* ========== DEFINITIONS END ========== */



/* ========== EXPRESSION BEGIN ========== */

<Expression> ::= <LogicalOrExpression>

<LogicalOrExpression> ::= <LogicalAndExpression> ( "||" <LogicalAndExpression> )*

<LogicalAndExpression> ::= <BitwiseOrExpression> ( "&&" <BitwiseOrExpression> )*

<BitwiseOrExpression> ::= <BitwiseXorExpression> ( "|" <BitwiseXorExpression> )*

<BitwiseXorExpression> ::= <BitwiseAndExpression> ( "^" <BitwiseAndExpression> )*

<BitwiseAndExpression> ::= <EqualityExpression> ( "&" <EqualityExpression> )*

<EqualityExpression> ::= <RelationalExpression> ( ( "==" | "!=" ) <RelationalExpression> )*

<RelationalExpression> ::= <ShiftExpression> ( ( "<" | ">" | "<=" | ">=" ) <ShiftExpression> )*

<ShiftExpression> ::= <AdditiveExpression> ( ( "<<" | ">>" ) <AdditiveExpression> )*

<AdditiveExpression> ::= <MultiplicativeExpression> ( ( "+" | "-" ) <MultiplicativeExpression> )*

<MultiplicativeExpression> ::= <UnaryExpression> ( ( "*" | "/" | "%" ) <UnaryExpression> )*

<UnaryExpression> ::= <UnaryOperator> <UnaryExpression> | <PostfixExpression>

<UnaryOperator> ::=  "+" | "-" | "!" | "~" | "&" | "*"

<PostfixExpression> ::= <PrimaryExpression> ( <PostfixOp> )*

<PostfixOp> ::= "[" <Expression> "]"
              | "." <Identifier>
              
<FunctionCall> ::= <Identifier> "(" ( <Expression> ("," <Expression>)* )? ")"

<ArrayInitialization> ::= "[" <Expression> ( "," <Expression> )* "]"

<TypeInitialization> ::= "{" ( (<Expression> ("," <Expression>)*) | (<Identifier> ":" <Expression> ("," <Identifier> ":" <Expression>)*)) "}"

<PrimaryExpression> ::= <Identifier>
                      | <Literal>
                      | <ArrayInitialization>
                      | <TypeInitialization>
                      | "(" <Expression> ")"
                      | <FunctionCall>

/* ========== EXPRESSION END ========== */



/* ========== LITERALS BEGIN ========== */

<Literal> ::= <IntegerLiteral> | <FloatingPointLiteral> | <StringLiteral> | <InternalConstant>

<IntegerLiteral> ::= <Digit>+

<FloatingPointLiteral> ::= <IntegerLiteral> "." <Digit>*

<StringLiteral> ::= "\"" ( <Letter> | <Digit> | " " | "\n" | "\t" )* "\""

<InternalConstant> ::= "true" | "false" | "null"

/* ========== LITERALS END ========== */


<Identifier> ::= <Letter> ([a-z] | [A-Z] | [0-9] | "_")*

<Number> ::= <Digit>+

<Letter> ::= ([a-z] | [A-Z])

<Digit> ::= [0-9]