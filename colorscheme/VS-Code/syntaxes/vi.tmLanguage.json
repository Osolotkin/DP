{
    "name": "vi",
    "scopeName": "source.vi",
    "fileTypes": [
        "vi"
    ],
    "patterns": [
        {
            "include": "#custom-type"
        },
        {
            "include": "#import-statement"
        },
        {
            "name": "comment.line",
            "match": "\/\/.*"
        },
        {
            "include": "#comment"
        },
        {
            "include": "#keyword" 
            
        },
        { 
            "name": "keyword.operator",
            "match": "\\b(\\+|\\-|\\*|\/|\\%)\\b"
        },
        { 
            "name": "keyword.datatype",
            "match": "\\b(int|i8|u8|i16|u16|i32|u32|i64|u64|f32|f64|string)\\b"
        },
        {
            "name": "constant.language",
            "match": "\\b(null|true|false)\\b"
        },
        {
            "name": "constant.numeric.decimal",
            "match": "\\b((((\\d*)?(\\.)?)|(\\.)?)\\d\\d*f?)\\b"
        },
        {
            "name": "constant.numeric.hexadecimal",
            "match": "\\b(0x[0-9a-fA-F][0-9a-fA-F]*)\\b"
        },
        {
            "name": "constant.numeric.binary",
            "match": "\\b(0b[0-1][0-1]*)\\b"
        },
        {
            "name": "constant.character",
            "match": "'.*'"
        },
        {
            "name": "string.quoted.double",
            "match": "\".*\""
        },
        {
            "name": "entity.name.scope-resolution",
            "match": "\\b[A-Za-z_]+\\b(?=(\\s*(::|{)))"
        },
        {
            "name": "storage.type",
            "match": "\\b(enum|def)\\b"
        },
        {
            "name": "variable.other.property",
            "match": "\\b((?<=\\.)[a-zA-Z][0-9a-zA-Z\\_]*)\\b"
        },
        {
            "name": "meta.function.definition.parameters",
            "match": "\\b(ASD)\\b"
        },
        {
            "name": "entity.name.function",
            "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(\\s+)*\\("
        },
        {
            "name": "entity.name.class",
            "match": "(?<=(\\b(def|enum)\\b))((\\s+)*\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b)"
        }
    ],
    "repository": {
        
        "comment": {
            "name": "comment.block",
            "begin": "/{",
            "end": "/}",
            "patterns": [{"include": "#comment"}]
        },

        "custom-type": {
            "name": "entity.name.type",
            "match": "(?!(using|while|for|loop|if|goto|return|goto|else|do|fcn|def|enum|const|embed|int|i8|u8|i16|u16|i32|u32|i64|u64|f32|f64|string))\\b([a-zA-z_][0-9a-zA-Z_]*)\\b(?=((\\s+)*\\b([a-zA-z_][0-9a-zA-Z_]*)\\b)|\\^)"    
        },

        "import-statement": {
            "name": "meta.import",
            "match": "(\\B#\\bimport\\b)(\\s*)([\\w,\\s-]+\\.[A-Za-z]+)(\\s+(as)\\s+([A-Za-z]+)(\\s+([A-Za-z]+))?)?;",
            "captures": {
                "1": { "name": "storage.modifier.import" },
                "3": { "name": "entity.name.filename" },
                "5": { "name": "keyword.operator" },
                "6": { "name": "keyword.control" },
                "8": { "name": "source.vi" }
             }
        },

        "import": {
            "name": "storage.modifier.import",
            "match": "\\B#\\bimport\\b"
        },

        "keyword": {
            "name": "keyword.control",
            "match": "\\b(if|else|continue|break|goto|using|while|for|loop|do|return|fcn|const|embed)\\b"
        },

        "filename": {
            "name": "filename",
            "match": "^[\\w,\\s-]+\\.[A-Za-z]{3}$"
        }

    }
}