
// array of constant compile-time known size
int[2] arr;
arr[0] = 1;
arr[1] = 2;

"arr: [%i, %i]\n" arr[0], arr[1];

// can be implicitly treated as pointer
int^ ptr = arr;
"arr[0]: %i\n" ^ptr;

ptr = arr + 1;
"arr[1]: %i\n" ^ptr;

// array length is obtainable
"arr len: %i\n" arr.length;

// and works within functions
"arr len: %i\n" printArrayLength(arr);

// * note: array length is only compile-time value,
//         it is not stored anywhere in memory and 
//         is passed as hidden argument to a function 

int[2] arr2;
arr2[0] = 3;
arr2[1] = 4;

// one can reassign array variable
arr = arr2;
"arr: [%i, %i]\n" arr[0], arr[1];

// or
arr = ptr;
"arr: [%i, %i]\n" arr[0], arr[1];

// further more
int[4] arr3;
arr3[0] = 5;
arr3[1] = 6;

arr = arr3;
"arr: [%i, %i]\n" arr[0], arr[1];

// length of array always remain the same
"arr len: %i\n" printArrayLength(arr);



// constant array of constant compile-time known size
const int[2] carr = { 1, 2 };
carr[0] = 4;

"const arr: [%i, %i]\n" carr[0], carr[1];



// constant array of constant compile-time known size
// with constant compile-time known elements
embed int[2] earr = { 1, 2 };

"embed arr: [%i, %i]\n" earr[0], earr[1];



// array of constant run-time known size
int darrLen = 2;

int[const] darr = alloc int[darrLen];
darr[0] = 1;
darr[1] = 2;

"dynamic arr: [%i, %i]\n" darr[0], darr[1];
"dynamic arr len: %i\n" printArrayLength(darr);



// array of variable run-time known size
int[] arrList;
arrList[0] = 1;
arrList[1] = 2;

"array list: [%i, %i]\n" arrList[0], arrList[1];
"arrList len: %i\n" printArrayLength(arrList);

arrList[5] = 6;

"arrList[5]: %i\n" arrList[5];
"arrList len: %i\n" printArrayLength(arrList);



fcn printArrayLength(int[const] arr) => int {
    return arr.length;
}
